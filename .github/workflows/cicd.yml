name: CI-CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  KUBECTL_VERSION: v1.28.0
  KIND_VERSION: v0.20.0
  REGISTRY: localhost:5001
  DD_SITE: ${{ vars.DD_SITE || 'datadoghq.com' }}
  DDB_TABLE: ${{ vars.DDB_TABLE || 'orders' }}

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Kind cluster
        uses: helm/kind-action@v1
        with:
          version: ${{ env.KIND_VERSION }}
          kubectl_version: ${{ env.KUBECTL_VERSION }}
          cluster_name: case-cluster
          config: kind-config.yaml

      - name: Setup local registry
        run: |
          # Create local registry for Kind
          docker run -d --restart=always -p 5001:5000 --name registry registry:2
          # Connect registry to kind network
          docker network connect kind registry || true

      - name: Build and load images to Kind
        run: |
          # Build backend image
          docker build -t ${{ env.REGISTRY }}/backend:${{ github.sha }} app/backend/
          docker build -t ${{ env.REGISTRY }}/backend:latest app/backend/
          
          # Build frontend image
          docker build --build-arg VITE_BACKEND_URL=/api \
            -t ${{ env.REGISTRY }}/frontend:${{ github.sha }} app/frontend/
          docker build --build-arg VITE_BACKEND_URL=/api \
            -t ${{ env.REGISTRY }}/frontend:latest app/frontend/
          
          # Push to local registry
          docker push ${{ env.REGISTRY }}/backend:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/backend:latest
          docker push ${{ env.REGISTRY }}/frontend:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/frontend:latest

      - name: Deploy to Kind cluster
        run: |
          # Apply namespace
          kubectl apply -f k8s/namespace.yaml
          
          # Create config without AWS dependencies
          kubectl create configmap env-config -n case \
            --from-literal=DDB_TABLE=${{ env.DDB_TABLE }} \
            --from-literal=DD_SITE=${{ env.DD_SITE }} \
            --from-literal=AWS_REGION=us-east-1 \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create mock Datadog secret for testing
          kubectl create secret generic datadog -n case \
            --from-literal=api-key=mock-key \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy core applications (skip HPA, ingress for simplicity)
          sed -e "s#<AWS_ACCOUNT_ID>#localhost:5001#g" \
              -e "s#<AWS_REGION>##g" \
              -e "s#image: .*backend.*#image: ${{ env.REGISTRY }}/backend:${{ github.sha }}#" \
              k8s/backend-deployment.yaml | kubectl apply -f -
          
          sed -e "s#<AWS_ACCOUNT_ID>#localhost:5001#g" \
              -e "s#<AWS_REGION>##g" \
              -e "s#image: .*frontend.*#image: ${{ env.REGISTRY }}/frontend:${{ github.sha }}#" \
              k8s/frontend-deployment.yaml | kubectl apply -f -

      - name: Wait for deployment readiness
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/backend -n case
          kubectl wait --for=condition=available --timeout=300s deployment/frontend -n case
          kubectl get pods -n case

      - name: Basic health checks
        run: |
          # Port forward for testing
          kubectl port-forward -n case svc/backend 8080:8080 &
          kubectl port-forward -n case svc/frontend 3000:3000 &
          sleep 10
          
          # Test backend health
          curl -f http://localhost:8080/health || echo "Backend health check failed"
          
          # Test frontend availability
          curl -f http://localhost:3000 || echo "Frontend availability check failed"

      - name: Run performance tests (optional)
        if: ${{ vars.ENABLE_PERFORMANCE_TESTS == 'true' }}
        run: |
          # Simple load test using curl in a loop
          echo "Running basic performance test..."
          for i in {1..10}; do
            curl -s http://localhost:8080/health > /dev/null && echo "Request $i: OK" || echo "Request $i: FAIL"
          done

      - name: Chaos Engineering Test (optional)
        if: ${{ vars.ENABLE_CHAOS_TESTS == 'true' }}
        run: |
          echo "Running basic chaos test - pod deletion simulation"
          # Get a backend pod
          POD_NAME=$(kubectl get pods -n case -l app=backend -o jsonpath='{.items[0].metadata.name}')
          echo "Deleting pod: $POD_NAME"
          kubectl delete pod $POD_NAME -n case
          
          # Wait for new pod to be ready
          kubectl wait --for=condition=ready pod -l app=backend -n case --timeout=120s
          echo "Pod recovery successful"

  # Separate job for production AWS deployment
  deploy-to-aws:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && vars.DEPLOY_TO_AWS == 'true' }}
    needs: build-test-deploy
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push to ECR
        run: |
          # Backend
          docker build -t ${{ steps.ecr.outputs.registry }}/backend:${{ github.sha }} app/backend/
          docker push ${{ steps.ecr.outputs.registry }}/backend:${{ github.sha }}
          
          # Frontend
          docker build --build-arg VITE_BACKEND_URL=/api \
            -t ${{ steps.ecr.outputs.registry }}/frontend:${{ github.sha }} app/frontend/
          docker push ${{ steps.ecr.outputs.registry }}/frontend:${{ github.sha }}

      - name: Deploy to EKS with Blue-Green
        run: |
          aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}
          
          # Setup namespace and configs
          kubectl apply -f k8s/namespace.yaml
          sed -e "s/<AWS_REGION>/${{ vars.AWS_REGION }}/g" \
              -e "s/orders/${{ vars.DDB_TABLE }}/g" \
              -e "s/datadoghq.com/${{ vars.DD_SITE }}/g" \
              k8s/env-config.yaml | kubectl apply -f -
          
          # Deploy with image updates
          sed -e "s#<AWS_ACCOUNT_ID>#${{ vars.AWS_ACCOUNT_ID }}#g" \
              -e "s#<AWS_REGION>#${{ vars.AWS_REGION }}#g" \
              -e "s#image: .*backend.*#image: ${{ steps.ecr.outputs.registry }}/backend:${{ github.sha }}#" \
              k8s/backend-deployment.yaml | kubectl apply -f -
          
          kubectl rollout status deployment/backend -n case --timeout=300s

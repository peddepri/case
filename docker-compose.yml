services:
  backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3000
      - SERVICE_NAME=backend
      - DD_SERVICE=backend
      - DD_ENV=dev
      - DD_VERSION=0.1.0
      - DD_TRACE_ENABLED=true
      - DD_LOGS_INJECTION=true
      - DD_DOGSTATSD_HOST=datadog-agent
      - DD_DOGSTATSD_PORT=8125
      - DD_AGENT_HOST=datadog-agent
      - DD_AGENT_PORT=8126
      - AWS_REGION=us-east-1
      - DDB_TABLE=orders
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
    ports:
      - "3000:3000"
    depends_on:
      - datadog-agent
      - dynamodb-local

  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    environment:
      - VITE_BACKEND_URL=http://localhost:3000
    ports:
      - "5173:80"
    depends_on:
      - backend

  mobile:
    build:
      context: ./app/mobile
      dockerfile: Dockerfile
    environment:
      - EXPO_PUBLIC_BACKEND_URL=http://host.docker.internal:3000
    ports:
      - "19006:19006"
    depends_on:
      - backend

  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_ENV=dev
      - DD_APM_ENABLED=true
      - DD_LOGS_ENABLED=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_CONTAINER_EXCLUDE=name:datadog-agent
    ports:
      - "8126:8126"   # APM receiver
      - "8125:8125/udp" # DogStatsD
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
    restart: unless-stopped

  dynamodb-local:
    image: amazon/dynamodb-local:2.5.2
    ports:
      - "8000:8000"
    command: -jar DynamoDBLocal.jar -inMemory -sharedDb

  dynamodb-init:
    image: amazon/aws-cli:2.17.33
    depends_on:
      - dynamodb-local
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
    entrypoint: /bin/sh
    command: -c "set -e; for i in $$(seq 1 30); do aws --endpoint-url http://dynamodb-local:8000 dynamodb list-tables >/dev/null 2>&1 && break || echo 'waiting for dynamodb-local'; sleep 2; done; aws --endpoint-url http://dynamodb-local:8000 dynamodb create-table --table-name orders --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --billing-mode PAY_PER_REQUEST || true"

# Docker Compose para ambiente AWS local com LocalStack
# Simula EKS, ECR, DynamoDB, IAM, VPC, etc.
version: '3.8'

services:
  # LocalStack - AWS cloud emulator
  localstack:
    image: localstack/localstack-pro:latest
    container_name: case-localstack
    ports:
      - "4566:4566"            # LocalStack Gateway
      - "4510-4559:4510-4559"  # External services port range
      - "443:443"              # HTTPS (opcional)
    environment:
      # Auth
      - LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN:-}
      - ACTIVATE_PRO=1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-test}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-test}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      
      # Services to enable (Pro features: ecr, eks, elbv2, cloudcontrol)
      - SERVICES=ec2,ecr,eks,dynamodb,iam,sts,secretsmanager,cloudwatch,logs,s3,kms,elbv2,elb,cloudcontrol,autoscaling
      
      # EKS Configuration
      - EKS_LOADBALANCER_PORT=8081
      - PERSISTENCE=1
      
      # Debug
      - DEBUG=${DEBUG:-0}
      - LS_LOG=info
      
      # Docker in Docker para EKS
      - DOCKER_HOST=unix:///var/run/docker.sock
      
      # Hostname
      - LOCALSTACK_HOST=localstack
      - HOSTNAME_EXTERNAL=localstack
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./localstack-data}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./scripts/localstack-init:/etc/localstack/init:ro"
    networks:
      - localstack-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend conectado ao LocalStack
  backend-localstack:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    container_name: case-backend-localstack
    environment:
      - NODE_ENV=development
      - PORT=3000
      - SERVICE_NAME=backend
      
      # Datadog
      - DD_SERVICE=backend
      - DD_ENV=localstack
      - DD_VERSION=0.1.0
      - DD_TRACE_ENABLED=true
      - DD_LOGS_INJECTION=true
      - DD_DOGSTATSD_HOST=datadog-agent-localstack
      - DD_DOGSTATSD_PORT=8125
      - DD_AGENT_HOST=datadog-agent-localstack
      - DD_AGENT_PORT=8126
      
      # AWS LocalStack
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - DDB_TABLE=orders
      - DYNAMODB_ENDPOINT=http://localstack:4566
      - AWS_ENDPOINT_URL=http://localstack:4566
    ports:
      - "3001:3000"
    depends_on:
      localstack:
        condition: service_healthy
      datadog-agent-localstack:
        condition: service_started
    networks:
      - localstack-network

  # Frontend conectado ao backend LocalStack
  frontend-localstack:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    container_name: case-frontend-localstack
    environment:
      - VITE_BACKEND_URL=http://localhost:3001
    ports:
      - "5174:80"
    depends_on:
      - backend-localstack
    networks:
      - localstack-network

  # Mobile app conectado ao backend LocalStack
  mobile-localstack:
    build:
      context: ./app/mobile
      dockerfile: Dockerfile
    container_name: case-mobile-localstack
    environment:
      - EXPO_PUBLIC_BACKEND_URL=http://localhost:3001
      - EXPO_NO_TELEMETRY=1
    ports:
      - "19007:19006"
    depends_on:
      - backend-localstack
    networks:
      - localstack-network

  # Datadog Agent para ambiente LocalStack
  datadog-agent-localstack:
    image: gcr.io/datadoghq/agent:7
    container_name: case-datadog-agent-localstack
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-us5.datadoghq.com}
      - DD_ENV=localstack
      - DD_APM_ENABLED=true
      - DD_LOGS_ENABLED=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_CONTAINER_EXCLUDE=name:datadog-agent-localstack
      - DD_TAGS=env:localstack,stack:localstack
    ports:
      - "8127:8126"   # APM receiver
      - "8126:8125/udp" # DogStatsD
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
    networks:
      - localstack-network
    restart: unless-stopped

  # Kubernetes local (kind) - Simula EKS
  kind-cluster:
    image: kindest/node:v1.28.0
    container_name: case-kind-cluster
    privileged: true
    environment:
      - KIND_EXPERIMENTAL_DOCKER_NETWORK=localstack-network
    ports:
      - "6443:6443"  # Kubernetes API
      - "8080:80"    # Ingress HTTP
      - "8443:443"   # Ingress HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "./k8s:/k8s:ro"
    networks:
      - localstack-network
    healthcheck:
      test: ["CMD", "kubectl", "get", "nodes"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles: ["eks"]

  # AWS CLI + kubectl + helm toolbox
  aws-k8s-toolbox:
    image: alpine:3.19
    container_name: case-aws-k8s-toolbox
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_ENDPOINT_URL=http://localstack:4566
      - KUBECONFIG=/root/.kube/config
    entrypoint: /bin/sh
    command: -c "apk add --no-cache aws-cli kubectl helm curl bash && tail -f /dev/null"
    volumes:
      - "./k8s:/k8s:ro"
      - "./localstack-kubeconfig:/root/.kube"
      - "./scripts:/scripts:ro"
    depends_on:
      localstack:
        condition: service_healthy
    networks:
      - localstack-network
    profiles: ["tools"]

networks:
  localstack-network:
    driver: bridge

volumes:
  localstack-data:
